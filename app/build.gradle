buildscript {
    repositories {
        jcenter()
        google()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0'
        classpath 'io.fabric.tools:gradle:1.22.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://github.com/donnfelker/mvn-repo/raw/master/' }
    mavenLocal()
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
}



dependencies {
    // Fabric
    compile('com.crashlytics.sdk.android:crashlytics:2.7.0@aar') {
        transitive = true
    }

    // Android Support Libs
    implementation 'com.android.support:support-compat:26.1.0'
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'

    implementation 'com.google.code.gson:gson:2.8.2'


    // View Injection
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    // Logging
    implementation 'com.jakewharton.timber:timber:3.0.2'

    implementation 'com.actionbarsherlock:viewpagerindicator:2.4.1'
    implementation 'com.nineoldandroids:library:2.4.0'

    // Event Bus
    implementation 'com.squareup:otto:1.3.5'

    // Image Loading
    implementation 'com.squareup.picasso:picasso:1.1.1'

    // HTTP
    implementation 'com.squareup.retrofit:retrofit:1.5.1'

    // Fabric/Crashlytics
    compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true;
    }

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    // Set this dependency to use JUnit 4 rules
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    // Set this dependency to build and run Espresso tests
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    // Contrib
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:2.2.1') {
        // http://stackoverflow.com/a/30931887/5210
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    // Set this dependency to build and run UI Automator tests
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'org.mockito:mockito-core:1.9.5'

    // Add Dagger dependencies
    implementation 'com.google.dagger:dagger:2.11'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11'

    compileOnly 'javax.annotation:jsr250-api:1.0'
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26

        versionCode computeVersionCode()
        versionName computeVersionName()

        // Enable this if you want to use Build.GIT_SHA in your code somewhere.
        // This will give you the last GIT_SHA that was committed
        // buildConfigField "String", "GIT_SHA", "\"${gitSha}\""

        manifestPlaceholders = [
                fabricCrashlyticsApiKey: ""   // Set this in your ~/.gradle/gradle.properties as: crashlyticsApiKey or use "$System.env.CRASHLYTICS_API_KEY"  to use a env variable (and then set that value, of course)
        ]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        // Exclude file to avoid
        // Error: Duplicate files during packaging of APK
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword '123123'
            keyAlias 'debug'
            keyPassword '123123'
        }

        release {
            storeFile file('release.keystore')
            storePassword '123123'
            keyAlias 'release'
            keyPassword '123123'
        }
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            minifyEnabled false
            buildConfigField "boolean", "USE_CRASHLYTICS", "false"
            ext.enableCrashlytics = false
            // zipAlign false // this is default for debug
        }
        release {
            signingConfig signingConfigs.release
            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
            ext.enableCrashlytics = true
            // minifyEnabled true
            // proguardFile '..\proguard.cfg'
            // zipAlign true // this is default for release
            // testPackageName 'kz.gregbiv.bamboo.tests'
            // testInstrumentationRunner 'android.test.InstrumentationTestRunner' // this is the default
        }
    }

    sourceSets {
        test {
            resources {
                srcDir "test"
            }
        }
    }
}

afterEvaluate {
    initCrashlyticsPropertiesIfNeeded()
}

def initCrashlyticsPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        // 9 create fabric.properties file using gradle ant task
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: crashlyticsdemoApisecret)
            entry(key: "apiKey", value: crashlyticsdemoApikey)
        }
    }
}

def computeVersionCode() {

    if (System.env.BUILD_NUMBER) {              // Check if there is a system build number.
        return "$System.env.BUILD_NUMBER".toInteger()
    } else if (System.env.CIRCLE_BUILD_NUM) {   // Check to see if this is built on circle CI
        return "$System.env.CIRCLE_BUILD_NUM".toInteger()
    } else {
        return 1                                // if none is found, default to 1.
    }
}

def computeVersionName() {
    return "1." + computeVersionCode()
}

//noinspection GroovyUnusedAssignment
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
